#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <string.h>
#include <time.h>
#include <signal.h>
#include <thread>
#include <assert.h>
#include <string>
#include <algorithm>
#include <fstream>

#include "EkaDev.h"
#include "eka_fh.h"
#include "eka_macros.h"
#include "Efh.h"
#include "Exc.h"
#include "Eka.h"
#include "Efc.h"
#include "EkaCtxs.h"

#define MAX_SECURITIES 800000
#define MAX_UNDERLYINGS 2048
#define MAX_GROUPS 16

static volatile bool keep_work;
static EfhCtx* pEfhCtx = NULL;
static FILE* md[MAX_GROUPS];
static FILE* dictionary;
static char hostname[1024];
static char today_str[32] = {};

static std::string underlying2subscr[MAX_UNDERLYINGS] = {};
uint valid_underlying2subscr = 0;
static std::string mysecurity[MAX_SECURITIES] = {};
static std::string myunderlying[MAX_SECURITIES] = {};

static bool subscribe_all = false;
static bool print_tob_updates = false;

void print_usage(char* cmd) {
  printf("USAGE: %s <flags> \n",cmd); 
  printf("\t-m [MD SIDE]\t\tSW_side_A or SW_side_B or FPGA_side_B\n"); 
  printf("\t-g [NUM_OF_MC_GROUS]\tNumber of NOM MC groups in range 1-4\n"); 
  printf("\t-u [Underlying Name]\tName to subscribe to all its Securities\n");
  printf("\t-f [File Name]\t\tFile with a list of Underlyings to subscribe to all their Securities (1 name per line)\n");
  printf("\t-a \t\t\tSubscribe ALL\n");
  printf("\t-t \t\t\tPrint TOB updates (EFH)\n");
  printf("\t-p \t\t\tPrint Parsed Messages\n");
  return;
}

void  INThandler(int sig) {
  signal(sig, SIG_IGN);
  keep_work = false;
  printf("%s:Ctrl-C detected: keep_work = false\n",__func__);
  printf ("%s: exitting...\n",__func__);
  fflush(stdout);
  return;
}

static std::string ts_ns2str(uint64_t ts) {
  char dst[32] = {};
  uint ns = ts % 1000;
  uint64_t res = (ts - ns) / 1000;
  uint us = res % 1000;
  res = (res - us) / 1000;
  uint ms = res % 1000;
  res = (res - ms) / 1000;
  uint s = res % 60;
  res = (res - s) / 60;
  uint m = res % 60;
  res = (res - m) / 60;
  uint h = res % 24;
  sprintf (dst,"%02d:%02d:%02d.%03d.%03d.%03d",h,m,s,ms,us,ns);
  return std::string(dst);
}

void efhDefaultOnOrder(const EfhOrderMsg* msg, EfhSecUserData secData, EfhRunUserData userData) {
  return;
}

void efhDefaultOnTrade(const EfhTradeMsg* msg, EfhSecUserData secData, EfhRunUserData userData) {
  return;

}
void efhDefaultOnFeedDown(const EfhFeedDownMsg* msg, EfhSecUserData secData, EfhRunUserData userData) {
  uint8_t gr_id = (uint8_t)msg->group.localId;
  fprintf(md[gr_id],"FeedDown\n");
  printf ("=========================\n%s: %s -- %ju\n=========================\n",__func__,EKA_PRINT_GRP(&msg->group),msg->gapNum);
  return;
}

void efhDefaultOnFeedUp(const EfhFeedUpMsg* msg, EfhSecUserData secData, EfhRunUserData userData) {
  uint8_t gr_id = (uint8_t)msg->group.localId;
  fprintf(md[gr_id],"FeedUp\n");
  printf ("=========================\n%s: %s -- %ju\n=========================\n",__func__,EKA_PRINT_GRP(&msg->group),msg->gapNum);
  return;
}

void efhDefaultOnException(EkaExceptionReport* msg, EfhRunUserData efhRunUserData) {
  printf("%s: Doing nothing\n",__func__);
  return;
}

void onFireReport (EfcCtx* pEfcCtx, const EfcFireReport* fire_report_buf, size_t size) {
  printf ("%s: Doing nothing \n",__func__);
  return;	 
}

void OnQuote(const EfhQuoteMsg* msg, EfhSecUserData secData, EfhRunUserData userData) {
  EfhCtx* pEfhCtx = (EfhCtx*) userData;
  uint8_t gr_id = (uint8_t)msg->header.group.localId;
  if (pEfhCtx->printQStatistics && (++pEfhCtx->dev->fh[pEfhCtx->fhId]->b_gr[gr_id]->upd_ctr % 1000000 == 0)) {
    efhMonitorFhGroupState(pEfhCtx,(EkaGroup*)&msg->header.group);
  }

  if (! print_tob_updates) return;

  fprintf(md[gr_id],"%s,%s,%s,%s,%s,%c,%u,%.*f,%u,%u,%.*f,%u,%c,%c,%s\n",
	  "OptionMarketDataNASDAQ4",
	  today_str,
	  "IrrelevantCaptureTime",
#ifdef EKA_TEST_IGNORE_DEFINITIONS
	  (std::to_string(msg->header.securityId)).c_str(),
	  "SUBSCRIBE_ALL_UNDERLYING",
#else
	  mysecurity[(uint)secData].c_str(),
	  myunderlying[(uint)secData].c_str(),
#endif
	  '1',
	  msg->bidSide.size,
	  EKA_DEC_POINTS_10000(msg->bidSide.price), ((float) msg->bidSide.price / 10000),
	  msg->bidSide.customerSize,
	  msg->askSide.size,
	  EKA_DEC_POINTS_10000(msg->askSide.price), ((float) msg->askSide.price / 10000),
	  msg->askSide.customerSize,
	  EKA_TS_DECODE(msg->tradeStatus),
	  EKA_TS_DECODE(msg->tradeStatus),
	  (ts_ns2str(msg->header.timeStamp)).c_str()
	  );

  return;
}

static std::string eka_create_avt_definition (const EfhOptionDefinitionMsg* msg) {
  uint8_t y,m,d;
  char dst[32] = {};
  d = msg->expiryDate % 100;
  m = ((msg->expiryDate - d) / 100) % 100;
  y = msg->expiryDate / 10000 - 2000;

  memcpy(dst,msg->underlying,6);
  for (auto i = 0; i < 6; i++) if (dst[i] == 0 || dst[i] == ' ') dst[i] = '_';
  char call_put = msg->optionType == EfhOptionType::kCall ? 'C' : 'P';
  sprintf(dst+6,"%02u%02u%02u%c%08u",y,m,d,call_put,msg->strikePrice / 10);
  return std::string(dst);
}

void OnDefinition2subscr(const EfhOptionDefinitionMsg* msg, EfhSecUserData secData, EfhRunUserData userData) {
  EfhCtx* pEfhCtx = (EfhCtx*) userData;

  std::string msg_underlying = std::string(msg->underlying);
  std::replace(msg_underlying.begin(),msg_underlying.end(),' ','\0');

  std::string sec = eka_create_avt_definition(msg);
  fprintf (dictionary,"%s,%ju,%s\n",sec.c_str(),msg->header.securityId,EKA_PRINT_GRP(&msg->header.group));

  if (! subscribe_all) {
    bool found = false;
    for (uint i = 0; i < valid_underlying2subscr; i ++) {
      if (underlying2subscr[i].compare(0,underlying2subscr[i].size(),msg_underlying,0,underlying2subscr[i].size()) == 0) {
	found = true;
	break;
      }
    }
    if (! found) return;
  }
  static uint subscr_cnt = 0;

  mysecurity[subscr_cnt] = eka_create_avt_definition(msg);
  myunderlying[subscr_cnt] = msg_underlying;

  if (subscr_cnt > MAX_SECURITIES) on_error("Trying to subscibe on %u securities > %u MAX_SECURITIES",subscr_cnt,MAX_SECURITIES);
  printf ("Subscribing on: %s,%ju\n",mysecurity[subscr_cnt].c_str(),msg->header.securityId);
  efhSubscribeStatic(pEfhCtx, (EkaGroup*) &msg->header.group,  msg->header.securityId, EfhSecurityType::kOpt,(EfhSecUserData) subscr_cnt,0,0);
  subscr_cnt++;
  return;
}


int main(int argc, char *argv[]) {
  if (argc < 2) {
    print_usage(argv[0]);
    return 1;
  }


  gethostname(hostname, 1024);

  /* bool side_A = true; */

  /* if (strcmp(hostname, "nqxlxavt188d") == 0) side_A = false; */
  /* if (strcmp(hostname, "nqxlxavt194d") == 0) side_A = false; */
  /* if (strcmp(hostname, "nqxlxavt193d") == 0) side_A = false; */


  EkaProps ekaProps = {};
  uint NumMcGroups = 0;
  bool print_parsed_messages = false;

  typedef enum {SwFeedA, SwFeedB, FpgaFeedB} McSource;
  McSource mcSource = FpgaFeedB;
  bool use_underlyings_filename = false;
  std::string underlyings_filename;
  int opt; 
  while((opt = getopt(argc, argv, ":u:f:m:g:hapt")) != -1) {  
    switch(opt) {  
      case 'a':  
	printf ("Subscribe ALL\n");
	subscribe_all = true;
	break;
      case 'm': 
	if (std::string(optarg) == "SW_side_A") {
	  mcSource = SwFeedA;
	  printf("SW_side_A\n");
	} else if (std::string(optarg) == "SW_side_B") {
	  mcSource = SwFeedB;
	  printf("SW_side_B\n");
	} else if (std::string(optarg) == "FPGA_side_B"){
	  mcSource = FpgaFeedB;
	  printf("FpgaFeedB\n");
	} else {
	  on_error ("Unexpected MD Feed name %s",std::string(optarg).c_str());
	}
	break;
      case 'p':  
	printf("Print Parsed Message\n");  
	print_parsed_messages = true;
	break;  
      case 't':  
	printf("Print TOB Updates (EFH)\n");  
	print_tob_updates = true;
	break;  
      case 'u':  
	underlying2subscr[valid_underlying2subscr] = std::string(optarg);
	printf("Underlying to subscribe: %s\n", underlying2subscr[valid_underlying2subscr].c_str());  
	valid_underlying2subscr++;
	break;  
      case 'f':  
	use_underlyings_filename = true;
	underlyings_filename = std::string(optarg);
	printf("filename: %s\n", underlyings_filename.c_str());  
	break;  
      case 'g':  
	NumMcGroups =  atoi(optarg);
	printf("MC groups: %d\n", NumMcGroups);  
	break;  
      case 'h':  
	print_usage(argv[0]);
	break;  
      case ':':  
	printf("option needs a value\n");  
	break;  
      case '?':  
	printf("unknown option: %c\n", optopt); 
      break;  
      }  
  }  
  EkaDev* pEkaDev = NULL;

  EkaProp SW_Feed_side_A[] = {
    {"efh.NOM_ITTO.snapshot.auth","NGBAR2:HY4VXK"},

    {"efh.NOM_ITTO.group.0.mcast.addr","233.54.12.72:18000"},
    {"efh.NOM_ITTO.group.1.mcast.addr","233.54.12.73:18001"},
    {"efh.NOM_ITTO.group.2.mcast.addr","233.54.12.74:18002"},
    {"efh.NOM_ITTO.group.3.mcast.addr","233.54.12.75:18003"},

    {"efh.NOM_ITTO.group.0.snapshot.addr","206.200.43.72:18300"},
    {"efh.NOM_ITTO.group.1.snapshot.addr","206.200.43.73:18301"},
    {"efh.NOM_ITTO.group.2.snapshot.addr","206.200.43.74:18302"},
    {"efh.NOM_ITTO.group.3.snapshot.addr","206.200.43.75:18303"},

    {"efh.NOM_ITTO.group.0.recovery.addr","206.200.43.64:18100"},
    {"efh.NOM_ITTO.group.1.recovery.addr","206.200.43.65:18101"},
    {"efh.NOM_ITTO.group.2.recovery.addr","206.200.43.66:18102"},
    {"efh.NOM_ITTO.group.3.recovery.addr","206.200.43.67:18103"},
  };


  EkaProp SW_Feed_side_B[] = {
    {"efh.NOM_ITTO.snapshot.auth","NGBAR2:HY4VXK"},

    {"efh.NOM_ITTO.group.0.mcast.addr","233.49.196.72:18000"},
    {"efh.NOM_ITTO.group.1.mcast.addr","233.49.196.73:18001"},
    {"efh.NOM_ITTO.group.2.mcast.addr","233.49.196.74:18002"},
    {"efh.NOM_ITTO.group.3.mcast.addr","233.49.196.75:18003"},

    {"efh.NOM_ITTO.group.0.snapshot.addr","206.200.43.72:18300"},
    {"efh.NOM_ITTO.group.1.snapshot.addr","206.200.43.73:18301"},
    {"efh.NOM_ITTO.group.2.snapshot.addr","206.200.43.74:18302"},
    {"efh.NOM_ITTO.group.3.snapshot.addr","206.200.43.75:18303"},

    {"efh.NOM_ITTO.group.0.recovery.addr","206.200.43.64:18100"},
    {"efh.NOM_ITTO.group.1.recovery.addr","206.200.43.65:18101"},
    {"efh.NOM_ITTO.group.2.recovery.addr","206.200.43.66:18102"},
    {"efh.NOM_ITTO.group.3.recovery.addr","206.200.43.67:18103"},
  };

  EkaProp FPGA_Feed_side_B[] = {
    {"efh.NOM_ITTO.snapshot.auth","NGBAR2:HY4VXK"},

    {"efh.NOM_ITTO.group.0.mcast.addr","233.54.12.76:18000"},
    {"efh.NOM_ITTO.group.1.mcast.addr","233.54.12.77:18001"},
    {"efh.NOM_ITTO.group.2.mcast.addr","233.54.12.78:18002"},
    {"efh.NOM_ITTO.group.3.mcast.addr","233.54.12.79:18003"},

    {"efh.NOM_ITTO.group.0.snapshot.addr","206.200.43.72:18300"},
    {"efh.NOM_ITTO.group.1.snapshot.addr","206.200.43.73:18301"},
    {"efh.NOM_ITTO.group.2.snapshot.addr","206.200.43.74:18302"},
    {"efh.NOM_ITTO.group.3.snapshot.addr","206.200.43.75:18303"},

    {"efh.NOM_ITTO.group.0.recovery.addr","206.200.43.64:18100"},
    {"efh.NOM_ITTO.group.1.recovery.addr","206.200.43.65:18101"},
    {"efh.NOM_ITTO.group.2.recovery.addr","206.200.43.66:18102"},
    {"efh.NOM_ITTO.group.3.recovery.addr","206.200.43.67:18103"},
  };


  if (mcSource == SwFeedA) {
    ekaProps.numProps = std::size(SW_Feed_side_A);
    ekaProps.props = SW_Feed_side_A;
  } else if (mcSource == SwFeedB) {
    ekaProps.numProps = std::size(SW_Feed_side_B);
    ekaProps.props = SW_Feed_side_B;
  } else {
    ekaProps.numProps = std::size(FPGA_Feed_side_B);
    ekaProps.props = FPGA_Feed_side_B;
  }


  if (use_underlyings_filename) {
    std::ifstream underlyings_file(underlyings_filename.c_str());
    if (! underlyings_file.is_open()) on_error("Cannot open %s",underlyings_filename.c_str());
    for(std::string line; std::getline(underlyings_file, line);) { 
      underlying2subscr[valid_underlying2subscr++] = line;
    }
    underlyings_file.close();
  }
  for (uint i = 0; i < valid_underlying2subscr; i++) printf ("UNDERLYING2SUBSCR %6u: %s\n",i,underlying2subscr[i].c_str());

  EfhInitCtx efhInitCtx = {};
  efhInitCtx.ekaProps = &ekaProps;
  efhInitCtx.numOfGroups = NumMcGroups;
  efhInitCtx.coreId = 0;
  efhInitCtx.recvSoftwareMd = true;

#ifdef EKA_TEST_IGNORE_DEFINITIONS
  efhInitCtx.subscribe_all = true;
#endif

  time_t t = time(NULL);
  struct tm tm = *localtime(&t);
  sprintf(today_str,"%04d%02d%02d", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);

  keep_work = true;
  signal(SIGINT, INThandler);

  EfhRunCtx runCtx[4] = {};

  EkaDevInitCtx ekaDevInitCtx = {};
  ekaDevInit(&pEkaDev, (const EkaDevInitCtx*) &ekaDevInitCtx);

  efhInit(&pEfhCtx,pEkaDev,&efhInitCtx);
  pEfhCtx->dontPrintTobUpd = false;
  pEfhCtx->printQStatistics = true;

  if (print_parsed_messages) pEfhCtx->dev->fh[0]->print_parsed_messages = true;

  std::string dict_file_name = std::string("dict") + '_' + std::string(today_str) + std::string(".txt");
  if ((dictionary = fopen(dict_file_name.c_str(),"w"))  == NULL) on_error ("Error opening %s file",dict_file_name.c_str());

  EkaGroup nom_gr[4] = {
    {EkaSource::kNOM_ITTO, (EkaLSI)0},
    {EkaSource::kNOM_ITTO, (EkaLSI)1},
    {EkaSource::kNOM_ITTO, (EkaLSI)2},
    {EkaSource::kNOM_ITTO, (EkaLSI)3}
  };

  for (uint8_t i = 0; i < efhInitCtx.numOfGroups; i++) {
    runCtx[i].numGroups = 1;
    runCtx[i].groups = &nom_gr[i];

    runCtx[i].efhRunUserData = (EfhRunUserData) pEfhCtx;
    EfhRunCtx* pEfhRunCtx = &runCtx[i];

    pEfhRunCtx->onEfhQuoteMsgCb        = OnQuote;
    pEfhRunCtx->onEfhOptionDefinitionMsgCb   = OnDefinition2subscr;
    pEfhRunCtx->onEfhOrderMsgCb        = efhDefaultOnOrder;
    pEfhRunCtx->onEfhTradeMsgCb        = efhDefaultOnTrade;
    pEfhRunCtx->onEfhFeedDownMsgCb     = efhDefaultOnFeedDown;
    pEfhRunCtx->onEfhFeedUpMsgCb       = efhDefaultOnFeedUp;
    pEfhRunCtx->onEkaExceptionReportCb = efhDefaultOnException;

    printf ("################ %s ################\n",EKA_PRINT_GRP(runCtx[i].groups));
#ifdef EKA_TEST_IGNORE_DEFINITIONS
    printf ("Skipping Definitions for EKA_TEST_IGNORE_DEFINITIONS\n");
#else
    efhGetDefs(pEfhCtx, &runCtx[i], &nom_gr[i]);
#endif
  }
  fclose(dictionary);


  std::thread efh_run_thread[4];

  for (uint8_t i = 0; i < efhInitCtx.numOfGroups; i++) {
    std::string md_filename    = std::string("EFH_") + std::string(EKA_PRINT_GRP(&nom_gr[i])) + std::string(".csv");
    if ((md[i] = fopen(md_filename.c_str(),"w")) == NULL) on_error ("Error opening %s file",md_filename.c_str());

    efh_run_thread[i] = std::thread(efhRunGroups,pEfhCtx, &runCtx[i]);
    efh_run_thread[i].detach();
#ifdef EKA_TEST_IGNORE_GAP
    sleep (1);
#else
    sleep (60);
#endif
  }

  while (keep_work) usleep(0);

  efhDestroy(pEfhCtx);
  ekaDevClose(pEkaDev);
  for (uint8_t i = 0; i < efhInitCtx.numOfGroups; i++) fclose(md[i]);

  printf ("Exitting normally...\n");

  return 0;
}

